name: Build, Transfer, and Deploy Billboard Docker Images

on:
  push:
    branches:
      - master

jobs:
  deploy:
    env:
      CADDY_PORT: ${{ vars.CADDY_PORT }}
      EXPRESS_PORT: ${{ vars.EXPRESS_PORT }}
      MONGO_URI: ${{ secrets.MONGO_URI }}
      GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
      GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
      GOOGLE_CALLBACK_URL: ${{ secrets.GOOGLE_CALLBACK_URL }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      JWT_SECRET_HTTP: ${{ secrets.JWT_SECRET_HTTP }}
    runs-on: ubuntu-latest
    environment:
      name: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build and Save Docker Images
        run: |
          ./ops/build.sh
          chmod 644 *.tar

      - name: Transfer Docker Files to Server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "billboard-*.tar"
          target: "/tmp/billboard"

      - name: Load Docker Images on Server and Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_KEY }}
          envs: CADDY_PORT,EXPRESS_PORT,MONGO_URI,GOOGLE_CLIENT_ID,GOOGLE_CLIENT_SECRET,GOOGLE_CALLBACK_URL,JWT_SECRET,JWT_SECRET_HTTP
          script: |
            # Stop and remove existing containers
            for container in billboard-web billboard-api billboard-db; do
              if docker ps -a --format '{{.Names}}' | grep -q "^$container$"; then
                echo "Stopping and removing existing $container container"
                docker stop $container
                docker rm $container
              fi
            done

            # Remove existing network
            if docker network ls --format '{{.Name}}' | grep -q "^billboard-default$"; then
              echo "Removing existing billboard-default network"
              docker network rm billboard-default
            fi

            # Remove existing images
            for image in billboard-web billboard-api billboard-db; do
              if docker images --format '{{.Repository}}' | grep -q "^$image$"; then
                echo "Removing existing $image image"
                docker rmi $image
              fi
            done

            # Load new images
            for image in billboard-web billboard-api billboard-db; do
              echo "Loading new $image image"
              docker load -i /tmp/billboard/$image.tar
            done

            # Create new network
            echo "Creating new billboard-default network"
            docker network create --driver bridge billboard-default

            # Start billboard-api
            echo "Starting new billboard-api container"
            docker run -d --name billboard-api --network billboard-default \
              -p "$EXPRESS_PORT:$EXPRESS_PORT" \
              -e EXPRESS_PORT="$EXPRESS_PORT" \
              -e MONGO_URI="$MONGO_URI" \
              -e GOOGLE_CLIENT_ID="$GOOGLE_CLIENT_ID" \
              -e GOOGLE_CLIENT_SECRET="$GOOGLE_CLIENT_SECRET" \
              -e GOOGLE_CALLBACK_URL="$GOOGLE_CALLBACK_URL" \
              -e JWT_SECRET="$JWT_SECRET" \
              -e JWT_SECRET_HTTP="$JWT_SECRET_HTTP" \
              --restart always \
              billboard-api:latest

            # Start billboard-web
            echo "Starting new billboard-web container"
            docker run -d --name billboard-web --network billboard-default \
              -p "$CADDY_PORT:$CADDY_PORT" \
              -e CADDY_PORT="$CADDY_PORT" \
              --restart always \
              billboard-web:latest

            # Start billboard-db
            # echo "Starting new billboard-db container"
            # docker run -d --name billboard-db --network billboard-default \
            #   -p "27017:27017" \
            #   --restart always \
            #   billboard-db:latest
